<UserControl x:Class="RDPoverSSH.Views.CommandButton"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:ui="http://schemas.modernwpf.com/2019"
             xmlns:viewModels="clr-namespace:RDPoverSSH.ViewModels"
             xmlns:c="clr-namespace:CalcBinding;assembly=CalcBinding"
             xmlns:views="clr-namespace:RDPoverSSH.Views"
             mc:Ignorable="d" 
             d:DataContext="{d:DesignInstance Type={x:Type viewModels:CommandViewModelBase}}"
             x:Name="This"
             ToolTip="{Binding TooltipText}">
    <UserControl.Resources>
        <Style TargetType="TextBlock">
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Foreground" Value="{DynamicResource TextControlForegroundDisabled}"/>
                    <Setter Property="Background" Value="Transparent"/>
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style TargetType="Button" BasedOn="{StaticResource DefaultButtonStyle}">
            <Setter Property="Margin" Value="5"/>
            <!-- Copied from here so we don't clobber the ControlTemplate -->
            <!-- https://github.com/Kinnara/ModernWpf/blob/d8d94bdf35c51938ee21666e0c90d3df905aa6dc/ModernWpf/Styles/Button.xaml#L28 -->
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border
                        x:Name="Background"
                        Background="{TemplateBinding Background}"
                        CornerRadius="{TemplateBinding ui:ControlHelper.CornerRadius}"
                        SnapsToDevicePixels="True">
                            <Border
                            x:Name="Border"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            CornerRadius="{TemplateBinding ui:ControlHelper.CornerRadius}">
                                <ContentPresenter
                                x:Name="ContentPresenter"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                Focusable="False"
                                RecognizesAccessKey="True"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                            </Border>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="Background" Property="Background" Value="{DynamicResource ButtonBackgroundPointerOver}" />
                                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ButtonBorderBrushPointerOver}" />
                                <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundPointerOver}" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="Background" Property="Background" Value="{DynamicResource ButtonBackgroundPressed}" />
                                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ButtonBorderBrushPressed}" />
                                <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundPressed}" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter TargetName="Background" Property="Background" Value="{DynamicResource ButtonBackgroundDisabled}" />
                                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ButtonBorderBrushDisabled}" />
                                <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{DynamicResource ButtonForegroundDisabled}" />
                            </Trigger>
                            <!-- This is the new stuff -->
                            <DataTrigger Binding="{Binding ElementName=This, Path=IsReadOnly}" Value="True">
                                <Setter TargetName="Background" Property="Background" Value="Transparent" />
                                <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource ButtonBorderBrushDisabled}" />
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ElementName=This, Path=IsSubCommand}" Value="True">
                                <Setter Property="Background" Value="Transparent"/>
                                <Setter Property="Margin" Value="0" />
                                <Setter Property="HorizontalContentAlignment" Value="Left"/>
                                <Setter Property="HorizontalAlignment" Value="Stretch"/>
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="ui:SplitButton">
            <Setter Property="Margin" Value="5"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding ElementName=This, Path=IsSubCommand}" Value="True">
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="Margin" Value="0" />
                    <Setter Property="HorizontalContentAlignment" Value="Left"/>
                    <Setter Property="HorizontalAlignment" Value="Stretch"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </UserControl.Resources>

    <Grid>
        <!-- Be sure to keep this in sync with the other button below -->
        <Button Command="{Binding Command, ElementName=This}" CommandParameter="{Binding ElementName=This, Path=CommandParameter}"
                Visibility="{c:Binding '!HasSubCommands', FalseToVisibility=Collapsed}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="{c:Binding 'HasParts ? 5 : 0'}"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <ui:FontIcon Grid.Column="0" FontSize="17" Glyph="{Binding IconGlyph}"/>
                <TextBlock Grid.Column="2" Text="{Binding Name}"/>
            </Grid>
        </Button>

        <!-- Be sure to keep this in sync with the other button above, minus the Flyout stuff -->
        <ui:SplitButton Command="{Binding Command, ElementName=This}" CommandParameter="{Binding ElementName=This, Path=CommandParameter}"
                        Visibility="{c:Binding HasSubCommands, FalseToVisibility=Collapsed}">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="{c:Binding 'HasParts ? 5 : 0'}"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <ui:FontIcon Grid.Column="0" FontSize="17" Glyph="{Binding IconGlyph}"/>
                <TextBlock Grid.Column="2" Text="{Binding Name}"/>
            </Grid>
            
            <ui:SplitButton.Flyout>
                <ui:Flyout Placement="BottomEdgeAlignedRight" Opening="SubCommandsMenu_Opening">
                    <ui:Flyout.FlyoutPresenterStyle>
                        <Style TargetType="ui:FlyoutPresenter">
                            <Setter Property="Padding" Value="0"/>
                        </Style>
                    </ui:Flyout.FlyoutPresenterStyle>

                    <ItemsControl ItemsSource="{Binding SubCommands}" Margin="0" VerticalAlignment="Center">
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <StackPanel>
                                    <Separator Visibility="{c:Binding HasSubCommandSeparator, FalseToVisibility=Collapsed}"/>
                                    <views:CommandButton DataContext="{Binding}" IsSubCommand="True" ParentSplitButton="{Binding RelativeSource={RelativeSource AncestorType=ui:SplitButton}}"/>
                                </StackPanel>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </ui:Flyout>
            </ui:SplitButton.Flyout>
        </ui:SplitButton>
    </Grid>
</UserControl>
